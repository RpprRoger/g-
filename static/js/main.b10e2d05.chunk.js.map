{"version":3,"sources":["components/List/search.svg","components/List/logo3.svg","components/List/icons/Buggyfriendly.svg","components/List/icons/short-sightedfriendly.svg","components/List/icons/welllit.svg","components/List/icons/Wellies.svg","components/List/icons/walkingbootfriendly.svg","components/List/icons/trainerfriendly.svg","components/List/icons/Wheelchairfriendly.svg","components/List/icons/sliphazard.svg","components/List/icons/flatsurface.svg","components/List/icons/child.svg","components/List/icons/road.svg","components/List/icons/learnbike.svg","components/Map/Map.js","components/FullscreenMap/FullscreenMap.js","components/Search/Search.js","components/List/icons/Icon.js","components/List/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","navigator","alert","once","loc","EventEmitter","geolocation","watchPosition","position","console","log","emit","e","message","enableHighAccuracy","maximumAge","timeout","GaMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","geo","undefined","self","func","setState","coords","latitude","longitude","addListener","removeListener","_this$props","route","children","centerRoute","objectWithoutProperties","centering","center","bboxArray","bbox","bounds","_ref5","_ref6","slicedToArray","dec","_ref3","_ref4","inc","react_default","a","createElement","className","Map","assign","zoom","TileLayer","url","attribution","Popup","GeoJSON","data","Component","FullscreenMap","style","width","height","Map_Map","control_default","Icon","_ref","meta","tileData","field","name","image","buggy","shortsighted","wellList","wellies","walking","trainerFriendly","wheelchair","slip","flat","child","road","learnbike","forEach","_ref2","push","index_es","cellHeight","cols","map","tile","key","src","alt","title","display","justifyContent","flexDirection","Item","value","ListItem_default","ListOfWalks","list","Array","from","length","fill","path","one","distance","is_flat","is_muddy","is_ssf","lighting","shoes","time","_this2","alignItems","flex","logo","variant","marginTop","search","marginRight","List_default","walk","Card_default","onClick","onSelect","evt","stopPropagation","dragging","touchZoom","doubleClickZoom","scrollWheelZoom","CardContent_default","paddingTop","List_Item","concat","id","existing","localStorage","getItem","history","createBrowserHistory","basename","process","App","active","JSON","parse","selectRoute","setItem","stringify","Router","Switch","Route","exact","List_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b10e2d05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.fd55e732.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo3.10b62017.svg\";","module.exports = __webpack_public_path__ + \"static/media/Buggyfriendly.2708fb80.svg\";","module.exports = __webpack_public_path__ + \"static/media/short-sightedfriendly.8f7ab287.svg\";","module.exports = __webpack_public_path__ + \"static/media/welllit.6d7e32fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/Wellies.9e307ce3.svg\";","module.exports = __webpack_public_path__ + \"static/media/walkingbootfriendly.bf6c17e2.svg\";","module.exports = __webpack_public_path__ + \"static/media/trainerfriendly.74ef9b43.svg\";","module.exports = __webpack_public_path__ + \"static/media/Wheelchairfriendly.745ee94b.svg\";","module.exports = __webpack_public_path__ + \"static/media/sliphazard.f8fd8523.svg\";","module.exports = __webpack_public_path__ + \"static/media/flatsurface.6ff8077b.svg\";","module.exports = __webpack_public_path__ + \"static/media/child.bd53dc8a.svg\";","module.exports = __webpack_public_path__ + \"static/media/road.220c6e12.svg\";","module.exports = __webpack_public_path__ + \"static/media/learnbike.1f34ceaf.svg\";","import React, { Component } from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport { GeoJSON, Map, TileLayer, Marker, Popup } from 'react-leaflet'\nimport L from 'leaflet';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport './map.css';\nimport bbox from '@turf/bbox';\nimport EventEmitter from 'eventemitter3';\n\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n\nif (!(\"geolocation\" in navigator)) {\n    alert('No geolocation!');\n}\n\nconst geoOptions = {\n    enableHighAccuracy: true,\n    maximumAge        : 500,\n    timeout           : 5000\n};\n\nlet once = false;\n\nconst handleError = (e) => {\n    if (!once) {\n        alert(e.message);\n        once = true;\n    }\n}\nconst getMiddle = (geo) => {\n    const middleN = geo.features[0].geometry.coordinates.length;\n    return geo.features[0].geometry.coordinates[Math.round(middleN/2)]\n};\nconst flip = ([ lng, lat ]) => [lat, lng];\n\nconst inc = ([o, t]) => {\n    return [o + .0001, t + .0001];\n};\nconst dec = ([o, t]) => [o -.0001, t-.0001];\n\nconst loc = new EventEmitter();\nnavigator.geolocation.watchPosition((position) => {\n    console.log('got update');\n    loc.emit('up', position);\n}, handleError, geoOptions);\n\nclass GaMap extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            geo: undefined\n        };\n    }\n\n    componentDidMount() {\n        console.log('getting geolocation');\n        const self = this;\n        this.func = function(position) {\n            self.setState({ geo: [position.coords.latitude, position.coords.longitude] });\n        };\n        loc.addListener('up', this.func);\n    }\n\n    componentWillUnmount() {\n        loc.removeListener('up', this.func);\n    }\n\n    render() {\n        const { route, children, centerRoute, ...props } = this.props;\n        console.log('rendering geo', this.state);\n        let centering = {\n            center: this.state.geo\n        };\n\n        if (route && centerRoute) {\n            const bboxArray = bbox(route);\n            const corner1 = dec([bboxArray[1], bboxArray[0]]);\n            const corner2 = inc([bboxArray[3], bboxArray[2]]);\n            const bounds = [corner1, corner2];\n            centering = { bounds };\n        }\n\n        return (\n            <div className=\"map\">\n                <Map {...centering} zoom={16} {...props}>\n                    <TileLayer\n                        url=\"http://tile.thunderforest.com/cycle/{z}/{x}/{y}.png?apikey=37635e2da12d4bcf90bb1137d42cc392\"\n                        attribution='Maps © <a href=\"http://www.thunderforest.com/\">Thunderforest</a>, Data © OpenStreetMap contributors.'\n                    />\n                    {this.state.geo && <Marker position={this.state.geo}>\n                        <Popup>\n                            You are here\n                        </Popup>\n                    </Marker>}\n                    <GeoJSON data={route} />\n                    {children}\n                </Map>\n            </div>\n        );\n    }\n}\n\nexport default GaMap;\n","import React from 'react';\n\nimport Map from '../Map/Map';\n\nimport Control from 'react-leaflet-control';\n\nconst style = {\n    position: 'absolute',\n    zIndex: '1000',\n    pointerEvents: 'none',\n    top: '50%', /* possible because the placeholder's parent is the map */\n    transform: 'translateY(-50%)', /* using the CSS3 Transform technique */\n    paddingTop: '10px',\n};\n\nexport default (props) => (\n    <div style={{ width: '100%', height: '100%'}}>\n        <Map {...props}>\n            <Control position=\"bottomleft\">\n                <h1>asdjasd</h1>\n            </Control>\n        </Map>\n    </div>\n);\n","import React, { Component } from 'react';\nimport SwipeableViews from 'react-swipeable-views';\n\nimport './search.css';\n\nclass Search extends Component {\n    state = {\n        page: 1,\n    }\n\n    submit = () => {\n        this.setState(({ page }) => ({ page: page + 1 }));\n    }\n\n    render() {\n        return (\n            <form class=\"search-form\" onSubmit={this.submit}>\n                <label>\n                    <select>\n                        <option value=\"0-1\">Less than 1 mile</option>\n                        <option value=\"0-2\">Less than 2 miles</option>\n                        <option value=\"0-3\">Less than 3 mile</option>\n                    </select>\n                </label>\n            </form>\n        );\n    }\n}\n\nexport default Search;\n","import React from 'react';\nimport buggy from './Buggyfriendly.svg';\nimport shortsighted from './short-sightedfriendly.svg';\nimport wellList from './welllit.svg';\nimport wellies from './Wellies.svg';\nimport walking from './walkingbootfriendly.svg';\nimport trainerFriendly from './trainerfriendly.svg';\nimport wheelchair from './Wheelchairfriendly.svg';\nimport slip from './sliphazard.svg';\nimport flat from './flatsurface.svg';\nimport child from './child.svg';\nimport road from './road.svg';\nimport learnbike from './learnbike.svg';\nimport { GridList, GridListTile } from '@material-ui/core';\n\nexport default ({meta}) => {\n    const tileData = [];\n\n    [\n        { field: 'isBuggyFriendly', name: 'Buggy friendly', image: buggy },\n        { field: 'isShortSightedFriendly', name: 'Short sighted friendly', image: shortsighted },\n        { field: 'isWellLit', name: 'Well lit', image: wellList },\n        { field: 'isWelliesNeeded', name: 'Wellies needed', image: wellies },\n        { field: 'isWalkingBootsNeeded', name: 'Walking boots needed', image: walking },\n        { field: 'isTrainerFriendly', name: 'Trainer friendly', image: trainerFriendly },\n        { field: 'isWheelchairFriendly', name: 'Wheelchair friendly', image: wheelchair },\n        { field: 'isSlipHazard', name: 'Slip hazard', image: slip },\n        { field: 'isFlatSurface', name: 'Flat surface', image: flat },\n        { field: 'isChildSafe', name: 'Child safe', image: child },\n        { field: 'isRoadSafe', name: 'Road safe', image: road },\n        { field: 'isLearningToRideAbike', name: 'Learning to ride a bike', image: learnbike },\n    ].forEach(({field, name, image}) => {\n        if (meta[field]) {\n            tileData.push({\n                name, image\n            })\n        }\n    });\n\n    return (\n        <GridList cellHeight={24} cols={3}>\n            {tileData.map(tile => (\n                <GridListTile key={tile.name} cols={1}>\n                    <img src={tile.image} alt={tile.name} title={tile.name} />\n                </GridListTile>\n            ))}\n        </GridList>\n    );\n};\n","import React, { Component } from 'react';\n\nimport Map from '../Map/Map';\nimport one from '../../route.json';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport search from './search.svg';\nimport logo from './logo3.svg';\nimport { Button } from '@material-ui/core';\nimport Icon from './icons/Icon';\n\nconst style = {\n    width: '100%',\n    display: 'flex',\n    'justifyContent': 'space-between',\n    'flexDirection': 'row',\n};\n\nconst Item = ({ title, value }) => (\n    <ListItem style={style}>\n        <span>{title}: </span>\n        <span>{value}</span>\n    </ListItem>\n);\n\nclass ListOfWalks extends Component {\n    state = {\n        list: []\n    }\n\n    componentDidMount() {\n        this.setState({\n            list: Array.from({ length: 5 }).fill({\n                path: one,\n                distance: \"1\",\n                is_flat: true,\n                is_muddy: false,\n                is_ssf: false,\n                lighting: \"open air\",\n                shoes: [\n                    \"Hiking boots\",\n                    \"Wellington boots\"\n                ],\n                time: \"12\",\n                title: \"Bacton Woods\"\n            }),\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    flex: 1,\n                    flexDirection: 'column'\n                }}>\n                    <img src={logo} style={{ width: '50vw' }} alt=\"G\" />\n                    <sub><i>Take your mind for a walk</i></sub>\n                    <Button variant=\"extendedFab\" style={{ marginTop: '1rem' }}>\n                        <img width=\"24\" height=\"24\" src={search} style={{ marginRight: '1rem' }} />\n                        Search\n                    </Button>\n                </div>\n                <List style={{ width: '100%' }}>\n                    {this.state.list.map(walk => (\n                        <ListItem>\n                            <Card onClick={() => this.props.onSelect(walk)} style={{ width: '100%'}}>\n                                <div style={{ height: 200, width: '100%' }} onClick={evt => evt.stopPropagation()}>\n                                    <Map dragging={false} touchZoom={false} doubleClickZoom={false} scrollWheelZoom={false} centerRoute route={walk.path} />\n                                </div>\n                                <CardContent style={{ paddingTop: 0 }}>\n                                    <div>\n                                        <List>\n                                            <Item title=\"Distance from you\" value={walk.distance}/>\n                                            <Item title=\"Time\" value={`${walk.time} minutes`} />\n                                            <ListItem>\n                                                <Icon meta={walk} key={walk.id} />\n                                            </ListItem>\n                                        </List>\n                                    </div>\n                                </CardContent>\n                            </Card>\n                        </ListItem>\n                    ))}\n                </List>\n            </div>\n        );\n    }\n}\n\n\nexport default ListOfWalks;\n","import React, { Component } from 'react';\nimport { Router, Route, Link, Switch } from \"react-router-dom\";\n\nimport FullscreenMap from './components/FullscreenMap/FullscreenMap';\nimport Search from \"./components/Search/Search\";\nimport { createBrowserHistory } from 'history';\nimport List from './components/List/List';\n\nconst existing = localStorage.getItem('active-walk');\n\nconst { PUBLIC_URL } = process.env;\nconst history = createBrowserHistory({\n  basename: PUBLIC_URL || '',\n});\n\nclass App extends Component {\n  state = {\n    active: existing && JSON.parse(existing),\n  };\n\n  selectRoute = (walk) => {\n    this.setState({active: walk});\n    localStorage.setItem('active-walk', JSON.stringify(walk));\n    history.push('/map');\n  };\n\n  render() {\n    return (\n      <div style={{height: '100%', width: '100%'}}>\n        <Router history={history}>\n          <Switch style={{ height: '100%', width: '100%'}}>\n            <Route path={`/`} exact>\n              <List onSelect={this.selectRoute} />\n            </Route>\n            <Route path={`/map`}>\n              {(p) => (console.log(this.state.active) ||\n                <FullscreenMap centerRoute route={this.state.active && this.state.active.path} />\n              )}\n            </Route>\n            <Route path={`/search`}>\n                <h1>hi</h1>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}