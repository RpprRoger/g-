{"version":3,"sources":["components/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","navigator","alert","geoOptions","enableHighAccuracy","maximumAge","timeout","GaMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","geo","undefined","console","log","Promise","resolve","reject","geolocation","getCurrentPosition","position","coords","latitude","longitude","setState","_this$props","children","objectWithoutProperties","react_default","a","createElement","className","Map","assign","center","zoom","TileLayer","url","attribution","Component","App","style","height","width","Map_Map","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"sXAQIA,SAAcC,IAAEC,KAAK,CACvBC,QAASD,IACTE,UAAWC,OAEbJ,IAAEK,OAAOC,UAAUC,QAAQN,KAAOF,EAE5B,gBAAiBS,WACnBC,MAAM,mBAGV,IAAMC,EAAa,CACfC,oBAAoB,EACpBC,WAAoB,IACpBC,QAAoB,KA8CTC,cA1CX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CAACC,SAAKC,GAHJT,iNAUXU,QAAQC,IAAI,gCACA,IAAIC,QAAQ,SAACC,EAASC,GAC9BtB,UAAUuB,YAAYC,mBAAmB,SAASC,GAC9CJ,EAAQ,CAACI,EAASC,OAAOC,SAAUF,EAASC,OAAOE,aACpDN,IACJpB,UAJHc,4EASJE,QAAQC,IAAI,UAAWH,GACvBL,KAAKkB,SAAS,CAAEb,oJAGX,IAAAc,EAC0BnB,KAAKJ,MAA5BwB,EADHD,EACGC,SAAaxB,EADhBE,OAAAuB,EAAA,EAAAvB,CAAAqB,EAAA,cAGL,OADRZ,QAAQC,IAAI,gBAAiBR,KAAKI,OAEtBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD5B,OAAA6B,OAAA,CAAKC,OAAQ5B,KAAKI,MAAMC,IAAKwB,KAAM,IAAQjC,GACvC0B,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAEhBV,EAAAC,EAAAC,cAACtC,EAAA,EAAD,CAAQ4B,SAAUd,KAAKI,MAAMC,MAC5Be,WApCDa,aCXLC,mLARX,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,MAAO,CAACC,OAAQ,IAAKC,MAAO,MAC/Bf,EAAAC,EAAAC,cAACc,EAAD,cAJUL,aCSEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB3D,WACrBA,UAAU4D,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.55fef592.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport { Map, TileLayer, Marker } from 'react-leaflet'\nimport L from 'leaflet';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport './map.css';\n\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n\nif (!(\"geolocation\" in navigator)) {\n    alert('No geolocation!');\n}\n\nconst geoOptions = {\n    enableHighAccuracy: true,\n    maximumAge        : 30000,\n    timeout           : 5000\n};\n\nclass GaMap extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {geo: undefined};\n    }\n\n    async componentDidMount() {\n        let geo;\n\n        try {\n            console.log('getting geolocation');\n            geo = await new Promise((resolve, reject) => {\n                navigator.geolocation.getCurrentPosition(function(position) {\n                    resolve([position.coords.latitude, position.coords.longitude]);\n                }, reject);\n            }, geoOptions);\n        } catch(e) {\n            throw e;\n        }\n\n        console.log('got geo', geo);\n        this.setState({ geo });\n    }\n\n    render() {\n        const { children, ...props } = this.props;\nconsole.log('rendering geo', this.state);\n        return (\n            <div className=\"map\">\n                <Map center={this.state.geo} zoom={13} {...props}>\n                    <TileLayer\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n                    />\n                    <Marker position={this.state.geo}></Marker>\n                    {children}\n                </Map>\n            </div>\n        );\n    }\n}\n\nexport default GaMap;\n","import React, { Component } from 'react';\nimport Map from './components/Map/Map.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={{height: 500, width: 500}}>\n        <Map />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}